parameters:
- name: OS
  type: string
  default:
- name: Arch
  type: string
  default: 
- name: ArtifactName
  type: string
# Currently GOBIN is only relevant for Windows to find winres
- name: GOBIN
  type: string
  default: $(Build.SourcesDirectory)\bin

steps: 
- task: GoTool@0
  inputs:
    version: '1.16.5'
    GOBIN: ${{ parameters.GOBIN }}

- script: echo '##vso[task.prependpath]${{ parameters.GOBIN }}'

- script: echo 'path is %path% or $(PATH)'

- task: Go@0
  displayName: 'Go install go-winres'
  inputs:
    command: 'custom'
    customCommand: 'install'
    arguments: 'github.com/tc-hib/go-winres@latest'
    workingDirectory: '$(Build.SourcesDirectory)/cmd/sqlcmd'
  env:
      GOBIN: ${{ parameters.GOBIN }}

- task: Go@0
  displayName: 'Go generate'
  inputs:
    command: 'custom'
    customCommand: 'generate'
    workingDirectory: '$(Build.SourcesDirectory)/cmd/sqlcmd'
  env: 
    GOBIN: ${{ parameters.GOBIN }}

- task: Go@0
  displayName: 'Go: get dependencies'
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(Build.SourcesDirectory)/cmd/sqlcmd'
  env:
      GOOS: ${{ parameters.OS }}
      GOARCH: ${{ parameters.Arch }}
      GOBIN: ${{ parameters.GOBIN }}

- task: Go@0
  displayName: 'Go: build sqlcmd'
  inputs:
    command: 'build'
    arguments: '-o $(Build.BinariesDirectory)'
    workingDirectory: '$(Build.SourcesDirectory)/cmd/sqlcmd'
  env:
      GOOS: ${{ parameters.OS }}
      GOARCH: ${{ parameters.Arch }}
      GOBIN: ${{ parameters.GOBIN }}

- task: CopyFiles@2
  inputs:
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    SourceFolder: '$(Build.BinariesDirectory)'
    Contents: '**'

- task: PublishPipelineArtifact@1
  displayName: 'Publish binary'
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)
    artifactName: 'Sqlcmd${{ parameters.ArtifactName }}'

